/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package lab02;

import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

class LibraryTest {
    @Test void someLibraryMethodReturnsTrue() {
        Library classUnderTest = new Library();
        assertTrue(classUnderTest.someLibraryMethod(), "someLibraryMethod should return 'true'");
    }
    @Test void rollMethod(){

        Library library = new Library();
        assertEquals(6,library.roll(6).length,"The roll length must match");

    }
    @Test void containsDuplicateMethod(){
        Library library = new Library();
        int [] trueResult = {1,3,3,5};
        int [] falseResult ={1,2,3,4};
        assertTrue(library.containsDuplicates(trueResult),"There is duplicate values in the array");
        assertFalse(library.containsDuplicates(falseResult), "There is no duplicate elements in the array");
    }
    @Test void calculateAvgMethod(){
        Library library = new Library();
        int [] avgTest = {5, 6,4};
        assertEquals(5,library.calculateAvg(avgTest),"The average of the array must be 5");

    }
    @Test void arrayOfArraysMethod(){
        Library library = new Library();
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        int [] requiredResult = {55, 54, 60, 53, 59, 57, 61};
        assertArrayEquals(requiredResult,library.arrayOfArrays(weeklyMonthTemperatures),"The result must be the third row {55, 54, 60, 53, 59, 57, 61}");
    }

    @Test void tallyTest(){
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");

        assertEquals("Bush",Library.tally(votes),"tally should return the name of the candidate  that has the max. votes which is Bush.");
    }

}
